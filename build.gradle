apply plugin: 'java'
apply plugin: 'eclipse'
//apply plugin: 'cobertura'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

version = '1.0'
sourceCompatibility = '1.8'
jar {
    manifest {
        attributes 'Implementation-Title': 'Translation Helper',
                   'Implementation-Version': version,
                   'main-class': 'de.vogel612.helper.Main'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    compile group: 'org.jdom', name: 'jdom2', version: '2.0.6'
    // xPath dependency
    compile group: 'jaxen', name: 'jaxen', version: '1.1.6' 
    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile 'org.mockito:mockito-all:2.0.2-beta'
 
}

buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		// classpath 'net.saliman:gradle-cobertura-plugin:2.2.8' // coverage reports :)
 		classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
 	}   
}

jacocoTestReport {
	reports {
		xml.enabled = true
		html.enabled = true
	}
}

/*cobertura {
	coverageFormats = ['html' , 'xml']
	/*coverageDirs = ['build/classes/main', 'build/classes/test']
	coverageSourceDirs = ['src/main/java']
}*/

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

test{
	outputs.upToDateWhen {false}
	testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
		afterSuite { desc, result ->
			if (!desc.parent) { // will match the outermost suite
				println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
			}
		}
		exceptionFormat = 'full'
    }
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.5'
}